import { useContext, useState } from "react";
import Lottie from "lottie-react";
import loaderAnimation from "../../assets/loader/loader.json"; // рдЖрд╡рд╢реНрдпрдХрддрд╛рдиреБрд╕рд╛рд░ рдкрде рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░реЗрдВ
import { AuthContext } from "../../context/AuthContext";
import Consult from "./Consult";

const ConsultHindi = () => {
  const [formData, setFormData] = useState({
    symptomsText: "",
    selectedSymptoms: [],
    duration: "",
    bodyPart: "",
    severityLevel: "",
    age: "",
    gender: "",
    weight: "",
    conditions: "",
    medications: "",
    allergies: "",
    customMedication: "", 
    customAllergy: "", 
    smoking: false,
    alcohol: false,
    drugs: false,
    diet: "",
    stressLevel: "",
    sleepPatterns: "",
    language:"hi"
  });

  const [geminiResponse, setGeminiResponse] = useState("");
  const [loading, setLoading] = useState(false);
  const { user } = useContext(AuthContext);
    const [language, setLanguage] = useState("hi");

  const symptomsList = [
    "рдмреБрдЦрд╛рд░",
    "рдердХрд╛рди",
    "рд╕рд┐рд░рджрд░реНрдж",
    "рдЦрд╛рдБрд╕реА",
    "рдЬреА рдорд┐рдЪрд▓рд╛рдирд╛",
    "рдЙрд▓реНрдЯреА",
    "рджрд╕реНрдд",
    "рдЫрд╛рддреА рдореЗрдВ рджрд░реНрдж",
    "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл",
    "рдЧрд▓реЗ рдореЗрдВ рдЦрд░рд╛рд╢",
    "рдирд╛рдХ рдмрд╣рдирд╛",
    "рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпреЛрдВ рдореЗрдВ рджрд░реНрдж",
    "рдЬреЛрдбрд╝реЛрдВ рдХрд╛ рджрд░реНрдж",
    "рдкреЗрдЯ рджрд░реНрдж",
    "рдЪрдХреНрдХрд░ рдЖрдирд╛",
    "рдкреАрда рджрд░реНрдж",
    "рддреНрд╡рдЪрд╛ рдкрд░ рдЪрдХрддреНрддреЗ",
    "рдардВрдб рд▓рдЧрдирд╛",
    "рдкрд╕реАрдирд╛ рдЖрдирд╛",
    "рднреВрдЦ рди рд▓рдЧрдирд╛",
  ];

  // рдлреЙрд░реНрдо рдлрд╝реАрд▓реНрдб рдкрд░рд┐рд╡рд░реНрддрди рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
  const handleChange = (e, field) => {
    setFormData({
      ...formData,
      [field]: e.target.value,
    });
  };

  // рд▓рдХреНрд╖рдг рдЪрдпрди рдЯреЙрдЧрд▓ рдХрд░реЗрдВ
  const toggleSymptom = (symptom) => {
    setFormData((prevData) => {
      const updatedSymptoms = prevData.selectedSymptoms.includes(symptom)
        ? prevData.selectedSymptoms.filter((item) => item !== symptom)
        : [...prevData.selectedSymptoms, symptom];
      return { ...prevData, selectedSymptoms: updatedSymptoms };
    });
  };

  // рдЬреАрд╡рдирд╢реИрд▓реА рд╡рд┐рдХрд▓реНрдкреЛрдВ рдХреЛ рдЯреЙрдЧрд▓ рдХрд░реЗрдВ
  const toggleLifestyle = (item) => {
    setFormData((prevData) => ({
      ...prevData,
      [item]: !prevData[item],
    }));
  };

  // рдлреЙрд░реНрдо рд╕рдмрдорд┐рдЯ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
  const handleSubmit = async () => {
    setLoading(true);

    // рдпрджрд┐ "рдЕрдиреНрдп" рдЪреБрдирд╛ рдЧрдпрд╛ рд╣реИ рддреЛ рджрд╡рд╛рдУрдВ рдФрд░ рдПрд▓рд░реНрдЬреА рдХреЛ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ
    const cleanedData = { ...formData };
    if (formData.medications === "рдЕрдиреНрдп") {
      cleanedData.medications = formData.customMedication;
    }
    if (formData.allergies === "рдЕрдиреНрдп") {
      cleanedData.allergies = formData.customAllergy;
    }
    delete cleanedData.customMedication;
    delete cleanedData.customAllergy;

    cleanedData.language = language;

    try {
      // рдлреЙрд░реНрдо рдбреЗрдЯрд╛ рдХреЛ рдмреИрдХрдПрдВрдб рдкрд░ рднреЗрдЬреЗрдВ
      const response = await fetch("https://healthadvisor-ai.onrender.com/api/ask-gemini", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(cleanedData),
      });

      if (!response.ok) {
        throw new Error("рдмреИрдХрдПрдВрдб рд╕реЗ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓");
      }

      // рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкрд╛рд░реНрд╕ рдХрд░реЗрдВ
      const data = await response.json();
      console.log("рдмреИрдХрдПрдВрдб рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛:", data); // рдбрд┐рдмрдЧрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдкреВрд░реНрдг рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд▓реЙрдЧ рдХрд░реЗрдВ

      // рдЕрдм, рд╕рдВрд░рдЪрдирд╛ рдХреЛ рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ рддрд╛рдХрд┐ рдпрд╣ рдЬрд╛рдВрдЪрд╛ рдЬрд╛ рд╕рдХреЗ рдХрд┐ рдЕрдкреЗрдХреНрд╖рд┐рдд рдкреНрд░рд╛рд░реВрдк рд╕реЗ рдХреЛрдИ рдореЗрд▓ рд╣реИ рдпрд╛ рдирд╣реАрдВ
      console.log("рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕рдВрд░рдЪрдирд╛:", data); // рд╕рдВрдкреВрд░реНрдг рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдСрдмреНрдЬреЗрдХреНрдЯ рд▓реЙрдЧ рдХрд░реЗрдВ

      // рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдореЗрдВ рдЕрдкреЗрдХреНрд╖рд┐рдд рд╕рдВрд░рдЪрдирд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВ
      if (data.reply) {
        const replyText = data.reply;
        setGeminiResponse(replyText);
      } else {
        setGeminiResponse("рдЬреЗрдорд┐рдиреА рд╕реЗ рдХреЛрдИ рдорд╛рдиреНрдп рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдирд╣реАрдВред");
      }
    } catch (error) {
      console.error("рдлреЙрд░реНрдо рд╕рдмрдорд┐рдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:", error);
      setGeminiResponse("рдХреБрдЫ рдЧрд▓рдд рд╣реЛ рдЧрдпрд╛ред");
    } finally {
      setLoading(false);
    }
  };



  if (language === "en") {
    return <Consult />;
  }

  return (
   <div className="max-w-7xl mx-auto p-6 bg-white rounded-3xl shadow-xl my-16 transition-all duration-500 ease-in-out animate-fade-in">
  {loading ? (
    <div className="flex justify-center items-center min-h-[60vh] ">
      <Lottie
        animationData={loaderAnimation}
        loop={true}
        className="w-48 h-48"
      />
    </div>
  ) : !geminiResponse ? (
    <>
      {/* рд▓рдХреНрд╖рдг */}
      <section className="mb-12">
        <div className="flex justify-between items-center pb-4 border-b border-gray-200">
          <h2 className="text-3xl text-teal-700 font-bold">
            рд╕рд░реНрд╡реЛрддреНрддрдо рдкрд░рд┐рдгрд╛рдо рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдлреЙрд░реНрдо рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рднрд░реЗрдВред
          </h2>
          <button
            onClick={() => setLanguage("en")}
            className="px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500"
          >
            Switch to English
          </button>
        </div>

        <div className="mt-8">
          <h3 className="text-xl font-semibold mb-3 text-teal-600">
            ЁЯй║ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ
          </h3>
          <textarea
            className="w-full p-4 border rounded-xl focus:outline-none focus:ring-2 focus:ring-teal-500 transition-all duration-300 text-gray-700"
            rows={4}
            placeholder="рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП, рдореБрдЭреЗ рдХрдордЬреЛрд░реА рдорд╣рд╕реВрд╕ рд╣реЛ рд░рд╣реА рд╣реИ рдФрд░ рдЫрд╛рддреА рдореЗрдВ рджрд░реНрдж рд╣реИ"
            value={formData.symptomsText}
            onChange={(e) => handleChange(e, "symptomsText")}
          />
        </div>

        <div className="mt-6">
          <h4 className="text-md font-medium mb-3 text-gray-700">
            рдЖрдк рдХреБрдЫ рд╕рд╛рдорд╛рдиреНрдп рд▓рдХреНрд╖рдг рднреА рдЪреБрди рд╕рдХрддреЗ рд╣реИрдВ:
          </h4>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3">
            {symptomsList.map((symptom) => (
              <label
                key={symptom}
                className="flex items-center gap-2 text-gray-700 cursor-pointer transition-colors duration-200 rounded-lg p-2 hover:bg-teal-50"
              >
                <input
                  type="checkbox"
                  className="form-checkbox h-5 w-5 text-teal-700 focus:ring-teal-500 rounded border-gray-300 transition-all duration-200"
                  checked={formData.selectedSymptoms.includes(symptom)}
                  onChange={() => toggleSymptom(symptom)}
                />
                <span className="text-sm">{symptom}</span>
              </label>
            ))}
          </div>
        </div>
      </section>

      <section className="mb-12">
        <h3 className="text-xl font-semibold mb-4 text-teal-600">
          тП│ рд▓рдХреНрд╖рдг рд╡рд┐рд╡рд░рдг <span className="text-teal-900 opacity-50">(рд╡реИрдХрд▓реНрдкрд┐рдХ)</span>
        </h3>
        <div className="grid sm:grid-cols-3 gap-4">
          {/* рдЕрд╡рдзрд┐ рдбреНрд░реЙрдкрдбрд╛рдЙрди */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рдЕрд╡рдзрд┐
            </label>
            <select
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.duration}
              onChange={(e) => handleChange(e, "duration")}
            >
              <option value="">рдЕрд╡рдзрд┐ рдЪреБрдиреЗрдВ</option>
              <option value="рдЖрдЬ рд╕реЗ">рдЖрдЬ рд╕реЗ</option>
              <option value="1 рджрд┐рди">1 рджрд┐рди рд╕реЗ</option>
              <option value="2 рджрд┐рди">2 рджрд┐рди рд╕реЗ</option>
              <option value="1 рд╕рдкреНрддрд╛рд╣">1 рд╕рдкреНрддрд╛рд╣ рд╕реЗ</option>
              <option value="2 рд╕рдкреНрддрд╛рд╣">2 рд╕рдкреНрддрд╛рд╣ рд╕реЗ</option>
              <option value="1 рдорд╣реАрдирд╛">1 рдорд╣реАрдирд╛ рд╕реЗ</option>
              <option value="рдПрдХ рдорд╣реАрдиреЗ рд╕реЗ рдЕрдзрд┐рдХ">рдПрдХ рдорд╣реАрдиреЗ рд╕реЗ рдЕрдзрд┐рдХ</option>
            </select>
          </div>

          {/* рд╢рд░реАрд░ рдХрд╛ рднрд╛рдЧ рдбреНрд░реЙрдкрдбрд╛рдЙрди */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рд╢рд░реАрд░ рдХрд╛ рднрд╛рдЧ
            </label>
            <select
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.bodyPart}
              onChange={(e) => handleChange(e, "bodyPart")}
            >
              <option value="">рд╢рд░реАрд░ рдХрд╛ рднрд╛рдЧ рдЪреБрдиреЗрдВ</option>
              <option value="рдЫрд╛рддреА">рдЫрд╛рддреА</option>
              <option value="рдкреЗрдЯ">рдкреЗрдЯ</option>
              <option value="рддреНрд╡рдЪрд╛">рддреНрд╡рдЪрд╛</option>
              <option value="рд╕рд┐рд░">рд╕рд┐рд░</option>
              <option value="рдкреАрда">рдкреАрда</option>
              <option value="рдкреИрд░">рдкреИрд░</option>
              <option value="рдмрд╛рдВрд╣">рдмрд╛рдВрд╣</option>
              <option value="рдЧрд░реНрджрди">рдЧрд░реНрджрди</option>
              <option value="рдХрд┐рд╕реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╢рд░реАрд░ рдХреЗ рднрд╛рдЧ рдореЗрдВ рдирд╣реАрдВ">
                рдХрд┐рд╕реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╢рд░реАрд░ рдХреЗ рднрд╛рдЧ рдореЗрдВ рдирд╣реАрдВ
              </option>
              <option value="рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдирд╣реАрдВ">рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдирд╣реАрдВ</option>
            </select>
          </div>

          {/* рдЧрдВрднреАрд░рддрд╛ рд╕реНрддрд░ рдбреНрд░реЙрдкрдбрд╛рдЙрди */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рдЧрдВрднреАрд░рддрд╛ рд╕реНрддрд░
            </label>
            <select
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.severityLevel}
              onChange={(e) => handleChange(e, "severityLevel")}
            >
              <option value="">рдЧрдВрднреАрд░рддрд╛ рдЪреБрдиреЗрдВ</option>
              <option value="рд╣рд▓реНрдХрд╛">рд╣рд▓реНрдХрд╛</option>
              <option value="рдордзреНрдпрдо">рдордзреНрдпрдо</option>
              <option value="рдЧрдВрднреАрд░">рдЧрдВрднреАрд░</option>
            </select>
          </div>
        </div>
      </section>

      {/* рдмреБрдирд┐рдпрд╛рджреА рдкреНрд░реЛрдлрд╛рдЗрд▓ */}
      <section className="mb-12">
        <h3 className="text-xl font-semibold mb-4 text-teal-600">
          ЁЯСд рдмреБрдирд┐рдпрд╛рджреА рдкреНрд░реЛрдлрд╛рдЗрд▓
        </h3>
        <div className="grid sm:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рдЖрдпреБ
            </label>
            <input
              type="number"
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.age}
              onChange={(e) => handleChange(e, "age")}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рд▓рд┐рдВрдЧ
            </label>
            <select
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.gender}
              onChange={(e) => handleChange(e, "gender")}
            >
              <option value="">рдЪреБрдиреЗрдВ</option>
              <option value="рдкреБрд░реБрд╖">рдкреБрд░реБрд╖</option>
              <option value="рдорд╣рд┐рд▓рд╛">рдорд╣рд┐рд▓рд╛</option>
              <option value="рдЕрдиреНрдп">рдЕрдиреНрдп</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рд╡рдЬрди (рдХрд┐рд▓реЛрдЧреНрд░рд╛рдо)
            </label>
            <input
              type="number"
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.weight}
              onChange={(e) => handleChange(e, "weight")}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╕реНрдерд┐рддрд┐рдпрд╛рдБ
            </label>
            <input
              type="text"
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.conditions}
              onChange={(e) => handleChange(e, "conditions")}
            />
          </div>
        </div>
      </section>

      {/* рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЗрддрд┐рд╣рд╛рд╕ */}
      <section className="mb-12">
        <h3 className="text-xl font-semibold mb-4 text-teal-600">
          ЁЯТК рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЗрддрд┐рд╣рд╛рд╕
        </h3>
        <div className="grid sm:grid-cols-2 gap-4">
          {/* рджрд╡рд╛рдПрдВ */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рджрд╡рд╛рдПрдВ
            </label>
            <div className="relative">
              <select
                className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
                value={formData.medications}
                onChange={(e) => handleChange(e, "medications")}
              >
                <option value="">рдирд┐рд░реНрдзрд╛рд░рд┐рдд рджрд╡рд╛ рдЪреБрдиреЗрдВ</option>
                <option value="рдПрд╕реНрдкрд┐рд░рд┐рди">рдПрд╕реНрдкрд┐рд░рд┐рди</option>
                <option value="рдЖрдЗрдмреБрдкреНрд░реЛрдлреЗрди">рдЖрдЗрдмреБрдкреНрд░реЛрдлреЗрди</option>
                <option value="рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓">рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓</option>
                <option value="рдЕрдореЛрдХреНрд╕рд┐рд╕рд┐рд▓рд┐рди">рдЕрдореЛрдХреНрд╕рд┐рд╕рд┐рд▓рд┐рди</option>
                <option value="рдЕрдиреНрдп">рдЕрдиреНрдп...</option>
              </select>
              {formData.medications === "рдЕрдиреНрдп" && (
                <input
                  type="text"
                  className="w-full p-3 mt-2 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
                  placeholder="рдЕрдкрдиреА рджрд╡рд╛ рджрд░реНрдЬ рдХрд░реЗрдВ"
                  value={formData.customMedication}
                  onChange={(e) => handleChange(e, "customMedication")}
                />
              )}
            </div>
          </div>

          {/* рдПрд▓рд░реНрдЬреА */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рдПрд▓рд░реНрдЬреА
            </label>
            <div className="relative">
              <select
                className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
                value={formData.allergies}
                onChange={(e) => handleChange(e, "allergies")}
              >
                <option value="">рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдПрд▓рд░реНрдЬреА рдЪреБрдиреЗрдВ</option>
                <option value="рдореВрдВрдЧрдлрд▓реА">рдореВрдВрдЧрдлрд▓реА</option>
                <option value="рдбреЗрдпрд░реА">рдбреЗрдпрд░реА</option>
                <option value="рдкрд░рд╛рдЧ">рдкрд░рд╛рдЧ</option>
                <option value="рдзреВрд▓">рдзреВрд▓</option>
                <option value="рдЕрдиреНрдп">рдЕрдиреНрдп...</option>
              </select>
              {formData.allergies === "рдЕрдиреНрдп" && (
                <input
                  type="text"
                  className="w-full p-3 mt-2 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
                  placeholder="рдЕрдкрдиреА рдПрд▓рд░реНрдЬреА рджрд░реНрдЬ рдХрд░реЗрдВ"
                  value={formData.customAllergy}
                  onChange={(e) => handleChange(e, "customAllergy")}
                />
              )}
            </div>
          </div>
        </div>
      </section>

      {/* рдЬреАрд╡рдирд╢реИрд▓реА рд╡рд┐рдХрд▓реНрдк */}
      <section className="mb-12">
        <h3 className="text-xl font-semibold mb-4 text-teal-600">
          ЁЯПГ рдЬреАрд╡рдирд╢реИрд▓реА рд╡рд┐рдХрд▓реНрдк
        </h3>
        <div className="grid sm:grid-cols-3 gap-4 mb-6">
          {["рдзреВрдореНрд░рдкрд╛рди", "рд╢рд░рд╛рдм", "рдбреНрд░рдЧреНрд╕"].map((item) => (
            <label
              key={item}
              className="flex items-center gap-2 text-gray-700 cursor-pointer transition-colors duration-200 rounded-lg p-2 hover:bg-teal-50"
            >
              <input
                type="checkbox"
                className="form-checkbox h-5 w-5 text-teal-700 focus:ring-teal-500 rounded border-gray-300 transition-all duration-200"
                checked={formData[item]}
                onChange={() => toggleLifestyle(item)}
              />
              <span className="capitalize text-sm">{item}</span>
            </label>
          ))}
        </div>

        <div className="grid sm:grid-cols-3 gap-4 mt-10">
          {/* рдЦрд╛рди-рдкрд╛рди рдХреА рдЖрджрддреЗрдВ */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рдЦрд╛рди-рдкрд╛рди рдХреА рдЖрджрддреЗрдВ
            </label>
            <select
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.diet}
              onChange={(e) => handleChange(e, "diet")}
            >
              <option value="">рдЦрд╛рди-рдкрд╛рди рдХреА рдЖрджрдд рдЪреБрдиреЗрдВ</option>
              <option value="рд╢рд╛рдХрд╛рд╣рд╛рд░реА">рд╢рд╛рдХрд╛рд╣рд╛рд░реА</option>
              <option value="рдорд╛рдВрд╕рд╛рд╣рд╛рд░реА">рдорд╛рдВрд╕рд╛рд╣рд╛рд░реА</option>
              <option value="рд╡реАрдЧрди">рд╡реАрдЧрди</option>
              <option value="рдЧреНрд▓реВрдЯреЗрди-рдореБрдХреНрдд">рдЧреНрд▓реВрдЯреЗрди-рдореБрдХреНрдд</option>
              <option value="рдХреАрдЯреЛ">рдХреАрдЯреЛ</option>
              <option value="рдЕрдиреНрдп">рдЕрдиреНрдп</option>
            </select>
            {formData.diet === "рдЕрдиреНрдп" && (
              <input
                type="text"
                className="w-full p-3 mt-2 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
                placeholder="рдЕрдкрдиреА рдЦрд╛рди-рдкрд╛рди рдХреА рдЖрджрдд рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдХрд░реЗрдВ"
                value={formData.customDiet}
                onChange={(e) => handleChange(e, "customDiet")}
              />
            )}
          </div>

          {/* рддрдирд╛рд╡ рдХрд╛ рд╕реНрддрд░ */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рддрдирд╛рд╡ рдХрд╛ рд╕реНрддрд░
            </label>
            <select
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.stressLevel}
              onChange={(e) => handleChange(e, "stressLevel")}
            >
              <option value="">рддрдирд╛рд╡ рдХрд╛ рд╕реНрддрд░ рдЪреБрдиреЗрдВ</option>
              <option value="рдмрд╣реБрдд рдХрдо">рдмрд╣реБрдд рдХрдо</option>
              <option value="рдХрдо">рдХрдо</option>
              <option value="рдордзреНрдпрдо">рдордзреНрдпрдо</option>
              <option value="рдЙрдЪреНрдЪ">рдЙрдЪреНрдЪ</option>
              <option value="рдмрд╣реБрдд рдЙрдЪреНрдЪ">рдмрд╣реБрдд рдЙрдЪреНрдЪ</option>
            </select>
          </div>

          {/* рд╕реЛрдиреЗ рдХреЗ рдкреИрдЯрд░реНрди */}
          <div>
            <label className="block text-sm font-medium mb-1 text-gray-600">
              рд╕реЛрдиреЗ рдХреЗ рдкреИрдЯрд░реНрди
            </label>
            <select
              className="w-full p-3 border rounded-xl focus:ring-2 focus:ring-teal-500 transition text-gray-700"
              value={formData.sleepPatterns}
              onChange={(e) => handleChange(e, "sleepPatterns")}
            >
              <option value="">рд╕реЛрдиреЗ рдХрд╛ рдкреИрдЯрд░реНрди рдЪреБрдиреЗрдВ</option>
              <option value="рд╕рд╛рдорд╛рдиреНрдп">рд╕рд╛рдорд╛рдиреНрдп</option>
              <option value="рдЕрдирд┐рджреНрд░рд╛">рдЕрдирд┐рджреНрд░рд╛</option>
              <option value="рдЕрддреНрдпрдзрд┐рдХ рдиреАрдВрдж">рдЕрддреНрдпрдзрд┐рдХ рдиреАрдВрдж</option>
              <option value="рдЕрдирд┐рдпрдорд┐рдд">рдЕрдирд┐рдпрдорд┐рдд</option>
            </select>
          </div>
        </div>
      </section>

      {/* рд╕рдмрдорд┐рдЯ рдмрдЯрди */}
      <div className="mt-12">
        <button
          onClick={handleSubmit}
          className="w-full bg-teal-700 text-white py-4 px-6 rounded-xl hover:bg-teal-800 focus:outline-none focus:ring-2 focus:ring-teal-500 transition-all duration-300 font-semibold text-lg shadow-md"
        >
          рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ
        </button>
      </div>
    </>
      ) : (
        // рдЬреЗрдорд┐рдиреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд░реЗрдВ
        <div className="p-6 bg-gray-100 text-gray-800 rounded-lg shadow-md space-y-2 min-h-[60vh] overflow-y-auto">
          <h3 className="text-4xl font-bold mb-10">
            {user
              ? `рдирдорд╕реНрддреЗ ${user.name}, рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд░рд┐рдкреЛрд░реНрдЯ рддреИрдпрд╛рд░ рд╣реИ:`
              : "рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд░рд┐рдкреЛрд░реНрдЯ:"}
          </h3>
          <div
            className="text-lg"
            dangerouslySetInnerHTML={{
              __html: geminiResponse
                .replace(
                  /~(.+?)~/g,
                  "<h3 class='text-teal-600 font-bold text-2xl'>$1</h3>"
                )
                .replace(
                  /\*\*(.+?)\*\*/g,
                  "<span class='font-semibold text-gray-800 text-lg shadow-2xl'>$1</span>"
                )
                .replace(/\*(.+?)\*/g, "<em class='italic text-xl'>$1</em>")
                .replace(/\n/g, "<br/>"),
            }}
          />
        </div>
      )}
    </div>
  );
};

export default ConsultHindi;
